import { logger } from './logger';

class SMSService {
  private twilioClient: any = null;
  private isConfigured = false;

  constructor() {
    this.initializeTwilio();
  }

  private initializeTwilio() {
    try {
      // Verificar se as vari√°veis de ambiente est√£o configuradas
      const accountSid = process.env.TWILIO_ACCOUNT_SID;
      const authToken = process.env.TWILIO_AUTH_TOKEN;
      const twilioNumber = process.env.TWILIO_PHONE_NUMBER;

      if (!accountSid || !authToken || !twilioNumber) {
        console.log('‚ö†Ô∏è Twilio n√£o configurado - vari√°veis de ambiente ausentes');
        console.log('üìù Configure: TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_PHONE_NUMBER');
        return;
      }

      // Importar Twilio dinamicamente
      const twilio = require('twilio');
      this.twilioClient = twilio(accountSid, authToken);
      this.isConfigured = true;

      console.log('‚úÖ Servi√ßo SMS (Twilio) inicializado com sucesso');
      
      logger.info('SMS Service inicializado', {
        component: 'sms-service',
        function: 'initializeTwilio',
        configured: true
      });
    } catch (error) {
      console.error('‚ùå Erro ao inicializar Twilio:', error);
      logger.error('Erro ao inicializar SMS Service', {
        component: 'sms-service',
        function: 'initializeTwilio',
        error: error
      });
    }
  }

  async sendSMS(phone: string, message: string): Promise<boolean> {
    if (!this.isConfigured || !this.twilioClient) {
      console.log('‚ö†Ô∏è SMS Service n√£o configurado');
      return false;
    }

    try {
      // Formatar n√∫mero para padr√£o internacional
      const formattedPhone = this.formatPhoneNumber(phone);
      console.log(`üì± Enviando SMS para: ${formattedPhone}`);
      console.log(`üìù Mensagem: ${message.substring(0, 50)}...`);

      const result = await this.twilioClient.messages.create({
        body: message,
        from: process.env.TWILIO_PHONE_NUMBER,
        to: formattedPhone
      });

      console.log(`‚úÖ SMS enviado com sucesso!`);
      console.log(`üìä Message SID: ${result.sid}`);
      console.log(`üìä Status: ${result.status}`);
      console.log(`üìä Direction: ${result.direction}`);
      console.log(`üìä Price: ${result.price || 'N/A'}`);

      logger.info('SMS enviado com sucesso', {
        component: 'sms-service',
        function: 'sendSMS',
        phone: formattedPhone,
        messageSid: result.sid,
        status: result.status,
        success: true
      });

      return true;
    } catch (error: any) {
      console.error(`‚ùå Erro ao enviar SMS para ${phone}:`, error);
      console.error(`üîç C√≥digo do erro:`, error.code || 'Desconhecido');
      console.error(`üìù Mensagem do erro:`, error.message || 'Sem mensagem');

      // Diagn√≥stico espec√≠fico de erros Twilio
      if (error.code === 21211) {
        console.error(`üì± DIAGN√ìSTICO: N√∫mero de telefone inv√°lido`);
      } else if (error.code === 21608) {
        console.error(`üö´ DIAGN√ìSTICO: N√∫mero n√£o pode receber SMS`);
      } else if (error.code === 21614) {
        console.error(`üîí DIAGN√ìSTICO: N√∫mero n√£o verificado (conta trial)`);
      } else if (error.code === 20003) {
        console.error(`üîë DIAGN√ìSTICO: Credenciais de autentica√ß√£o inv√°lidas`);
      } else {
        console.error(`‚ùì DIAGN√ìSTICO: Erro desconhecido - verifique configura√ß√£o`);
      }

      logger.error('Erro ao enviar SMS', {
        component: 'sms-service',
        function: 'sendSMS',
        phone: phone,
        error: error.message || error,
        errorCode: error.code
      });

      return false;
    }
  }

  private formatPhoneNumber(phone: string): string {
    // Remover caracteres n√£o num√©ricos
    const cleanPhone = phone.replace(/[^0-9]/g, '');
    
    // Se j√° tem c√≥digo do pa√≠s, retornar com +
    if (cleanPhone.startsWith('55') && cleanPhone.length >= 12) {
      return `+${cleanPhone}`;
    }
    
    // Se √© n√∫mero brasileiro sem c√≥digo do pa√≠s, adicionar +55
    if (cleanPhone.length >= 10) {
      return `+55${cleanPhone}`;
    }
    
    // Retornar como est√° se n√£o conseguir formatar
    return `+${cleanPhone}`;
  }

  getServiceStatus(): { configured: boolean; ready: boolean } {
    return {
      configured: this.isConfigured,
      ready: this.isConfigured && this.twilioClient !== null
    };
  }

  // M√©todo para testar a configura√ß√£o
  async testConfiguration(): Promise<boolean> {
    if (!this.isConfigured || !this.twilioClient) {
      console.log('‚ùå SMS Service n√£o configurado para teste');
      return false;
    }

    try {
      // Tentar obter informa√ß√µes da conta
      const account = await this.twilioClient.api.accounts(process.env.TWILIO_ACCOUNT_SID).fetch();
      console.log(`‚úÖ Teste de configura√ß√£o SMS bem-sucedido`);
      console.log(`üìä Account Status: ${account.status}`);
      console.log(`üìä Account Type: ${account.type}`);
      
      return true;
    } catch (error) {
      console.error('‚ùå Falha no teste de configura√ß√£o SMS:', error);
      return false;
    }
  }
}

// Singleton instance
let smsServiceInstance: SMSService | null = null;

export function getSMSService(): SMSService {
  if (!smsServiceInstance) {
    smsServiceInstance = new SMSService();
  }
  return smsServiceInstance;
}

export { SMSService };